
import numpy as np
from skimage import io
import matplotlib.pyplot as plt
import cv2
import imageManip_library as imM
from sklearn.decomposition import NMF
from sklearn.externals.joblib import Parallel, delayed
from skimage.restoration import denoise_nl_means,estimate_sigma
from scipy import signal
from joblib import Parallel, delayed

def create_grid(slice):
        grid = np.empty((85,85))
        for i in range(85):
            for j in range(85):
                grid[i,j] = np.mean(slice[i*3:i*3+3,j*3:j*3+3])
        return grid


def create_stack(slice):
    stack = np.empty((255,255))
    for i in range(85):
        for j in range(85):
                stack[i*3:i*3+3,j*3:j*3+3] = slice[i,j]
    return stack

def create_grid2(slice):
    q = np.empty((128,128))
    for i in range(128):
        for j in range(128):
            q[i,j] = np.mean(slice[i*2:i*2+2,j*2:j*2+2])
    return q


def create_stack2(slice):
    stack = np.empty((256,256))
    for i in range(128):
        for j in range(128):
                stack[i*2:i*2+2,j*2:j*2+2] = slice[i,j]
    return stack

import numpy as np
import skimage.transform

# Based on example code from:
# http://scikit-image.org/docs/dev/auto_examples/transform/plot_piecewise_affine.html

def deform(image1, points=20, distort=5.0):
    
    # create deformation grid 
    rows, cols = image1.shape[0], image1.shape[1]
    src_cols = np.linspace(0, cols, points)
    src_rows = np.linspace(0, rows, points)
    src_rows, src_cols = np.meshgrid(src_rows, src_cols)
    src = np.dstack([src_cols.flat, src_rows.flat])[0]

    # add distortion to coordinates
    s = src[:, 1].shape
    dst_rows = src[:, 1] + np.random.normal(size=s)*np.random.uniform(0.0, distort, size=s)
    dst_cols = src[:, 0] + np.random.normal(size=s)*np.random.uniform(0.0, distort, size=s)
    
    dst = np.vstack([dst_cols, dst_rows]).T

    tform = skimage.transform.PiecewiseAffineTransform()
    tform.estimate(src, dst)

    out_rows = rows 
    out_cols = cols
    out1 = skimage.transform.warp(image1, tform, output_shape=(out_rows, out_cols), mode="symmetric")
    #out2 = skimage.transform.warp(image2, tform, output_shape=(out_rows, out_cols), mode="symmetric")
    
    return out1#, out2    


    
def create_img(file_path,path_to_save,flag_hist = False, flag_edge = False, path_to_save2=None ):
    """Read an stream of image from file path and save a filtered image in path to save """
   
    im = io.imread(file_path)
    T,N,M = im.shape
    im_fil = np.empty(shape=im.shape)
    for i in range(T):
        im_fil[i,:,:]= im[i,:,:]-np.nanpercentile(im[i,:,:],5)
    conv_im = np.median(im_fil.reshape(T,256,256),axis=0)     
    
    Nk=3
    im_fil = signal.convolve2d(im_fil.reshape(T,256*256), np.ones((Nk,1))/Nk,mode='valid')    
    T = im_fil.shape[0] 
    print(T)   


    
    
    maximum = 65535/np.amax(conv_im) 

    conv_im =conv_im.astype(np.float32)*maximum   
    #conv_im = cv2.resize(conv_im[3:253,3:253] ,(N,M), interpolation = cv2.INTER_CUBIC)
      

    if flag_hist:
        clahe = cv2.createCLAHE(clipLimit=0.5, tileGridSize=(8,8))
        cl1 = clahe.apply(np.uint16(conv_im.reshape(N,N)))       
        
       
    kernel_sharpening = np.array([[-1,-1,-1], 
                              [-1, 9,-1],
                              [-1,-1,-1]])

    denoise = np.uint16(cl1)
    image = cv2.filter2D(np.uint16(cl1), -1, kernel_sharpening)
    

    im_fil = im_fil.reshape(T,256,256)
    grid = Parallel(n_jobs=12,verbose=0)(delayed(create_grid2) (im_fil[t,:,:]) for t in range(T))
    grid = np.asarray(grid)
    f = grid.copy()
    print('paralell ok')
    #percentile su tutto lo stack filtra meno
    perc = np.nanpercentile(grid.reshape(T*128*128),85)
    #grid2 = grid.copy()
    grid[grid<perc]=0  

    stackfilt = Parallel(n_jobs=12,verbose=0)(delayed(create_stack2) (grid[t,:,:]) for t in range(T))
    stackfilt = np.asarray(stackfilt)
    print('paralell ok')
    mask0=im_fil.copy()
    mask0[stackfilt==0]=0
    mask0=np.sum(mask0,axis=0)
    
    mask0[mask0<=1]=0
    mask0[mask0>1]=1

    stackfilt2 = im_fil.copy()
    stackfilt2[stackfilt==0]=np.nan
    n_p=16
    for i in range(16):
        for j in range(16):
            local = im_fil[:,i*n_p:i*n_p+n_p,j*n_p:j*n_p+n_p].copy()
            perc_local = np.nanpercentile(stackfilt2[:,i*n_p:i*n_p+n_p,j*n_p:j*n_p+n_p].reshape(T,n_p*n_p),45)
            #print(perc_local)
            if(np.isnan(perc_local)):
                local = 0*local
            else:
               
                local[local<=perc_local]=0
                local[local>0]=1
        #     plt.imshow(np.sum(local,axis=0))
        #     plt.show()    
            im_fil[:,i*n_p:i*n_p+n_p,j*n_p:j*n_p+n_p]=local
    


    #perc2 = np.nanpercentile(stackfilt2,50)
    #im_fil[im_fil<perc2]=0      
    mask1=np.sum(im_fil,axis=0)
#     plt.imshow(mask1[:250,:250])
#     plt.show()
    mask1[mask1<=1]=0
    mask1[mask1>1]=1
    #mask1= np.concatenate((mask1[:,:,np.newaxis],mask0[:,:,np.newaxis],np.zeros((256,256,1))),axis=2)
#     plt.imshow(mask1)
#     plt.show()
    #mask1 = cv2.resize(mask[3:253,3:253] ,(N,M), interpolation = cv2.INTER_CUBIC)
#     mask1[mask1>=0.7]=1#ricordarsi di cambiare
#     mask1[mask1<0.7]=0
    #mask[mask==0]=0.05
    
    

#     denoise = denoise*mask 
#     mean= np.mean(denoise)
#     std=np.std(denoise)
#     denoise_norm = (denoise-mean)/std
#     fig , ax = plt.subplots(1,2)
#     ax[0].imshow(denoise)
#     ax[1].imshow(np.uint16(denoise))
#     plt.show()

#     percentile = np.percentile(f,98,axis=0)
#     plt.imshow(percentile)
#     plt.show()
#     print(f.shape,'percent',percentile.shape)
    
#     f[f<=percentile]=0
#     f[f>percentile]=1
#     for i in range(10):
#         plt.imshow(f[i,:,:])
#         plt.show()
#     mask_spike = np.sum(f,axis=0)
#     plt.imshow(image*mask0*mask1)
#     plt.show()
    
    
#     mask_spike[mask_spike<10]=0
#     mask_spike[mask_spike>=10]=1
    

#     stack = np.empty((256,256))
#     for i in range(128):
#         for j in range(128):
#                 stack[i*2:i*2+2,j*2:j*2+2] = mask_spike[i,j]
    # prova = deform(image*mask0*mask1)
    # fig , ax = plt.subplots(1,2)
    # ax[0].imshow(prova)
    # ax[1].imshow(image*mask0*mask1)
    # plt.show()
     
    # ww,wwe = resize(mask0,mask0)
    # print(ww.shape,wwe.shape)

    mean_img = np.mean(np.float32(image))


    mean = np.mean(np.float32(image*mask1*mask0))
    std = np.std(image*mask1)
    image_norm = (image*mask1*mask0).astype(np.float32)-mean
    image =image.astype(np.float32) - mean_img


    io.imsave(path_to_save,image_norm.astype(np.float32))
    if path_to_save2:
        io.imsave(path_to_save2,image.astype(np.float32))
    #io.imsave(path_to_save,image_norm.astype(np.uint16))
    return image_norm.astype(np.float32),np.mean(image_norm),np.std(image_norm)
   
    
if __name__ == '__main__':
    #path = '/home/jbonato/Documents/Mask_R_CNN/a_train_dataset/set1/raw.tiff'
    path = '/home/jbonato/Documents/U-Net/TSeries-07262018-1151-1125_Ch2__movie_corrected_aligned.tiff'
    #/TSeries-04132018-1101-1035_Ch2__movie_corrected_aligned.tiff'#
    create_img(path,'/Users/jbonato/Desktop/cartella_prova/en11.png',True)

     